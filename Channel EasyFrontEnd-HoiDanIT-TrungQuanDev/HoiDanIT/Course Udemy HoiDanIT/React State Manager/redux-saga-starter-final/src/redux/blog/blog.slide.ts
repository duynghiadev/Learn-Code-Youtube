import { createSlice, PayloadAction, createAction } from "@reduxjs/toolkit"
import { IBlog } from "../../types/backend";

export interface BlogState {
    isPending: boolean;
    isError: boolean;
    data: IBlog[];
    errors: any;

    isCreating: boolean;
    isCreateSuccess: boolean;

    isUpdating: boolean;
    isUpdateSuccess: boolean;

    isDeleting: boolean;
    isDeleteSuccess: boolean;
}

const initialState: BlogState = {
    isPending: false,
    isError: false,
    data: [],
    errors: [],
    isCreating: false,
    isCreateSuccess: false,

    isUpdating: false,
    isUpdateSuccess: false,

    isDeleting: false,
    isDeleteSuccess: false
}

export const fetchBlogPending = createAction("fetchBlogPending");
export const fetchBlogSuccess = createAction<IBlog[]>("fetchBlogSuccess");
export const fetchBlogFailed = createAction("fetchBlogFailed");

export const createBlogPending = createAction<{ title: string; author: string; content: string }>("createBlogPending");
export const createBlogSuccess = createAction("createBlogSuccess");
export const createBlogFailed = createAction("createBlogFailed");

export const updateBlogPending = createAction<{ id: number; title: string; author: string; content: string }>("updateBlogPending");
export const updateBlogSuccess = createAction("updateBlogSuccess");
export const updateBlogFailed = createAction("updateBlogFailed");

export const deleteBlogPending = createAction<{ id: number }>("deleteBlogPending");
export const deleteBlogSuccess = createAction("deleteBlogSuccess");
export const deleteBlogFailed = createAction("deleteBlogFailed");

export const blogSlice = createSlice({
    name: "blog",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchBlogPending, (state, action) => {
                state.isPending = true;
                state.isError = false;
            })
            .addCase(fetchBlogSuccess, (state, action) => {
                state.isPending = false;
                state.isError = false;
                state.data = action.payload;
            })
            .addCase(fetchBlogFailed, (state, action) => {
                state.isPending = false;
                state.isError = true;
            })

            .addCase(createBlogPending, (state, action) => {
                state.isCreating = true;
                state.isCreateSuccess = false;
            })
            .addCase(createBlogSuccess, (state, action) => {
                state.isCreating = false;
                state.isCreateSuccess = true;
            })

            .addCase(updateBlogPending, (state, action) => {
                state.isUpdating = true;
                state.isUpdateSuccess = false;
            })
            .addCase(updateBlogSuccess, (state, action) => {
                state.isUpdating = false;
                state.isUpdateSuccess = true;
            })

            .addCase(deleteBlogPending, (state, action) => {
                state.isDeleting = true;
                state.isDeleteSuccess = false;
            })
            .addCase(deleteBlogSuccess, (state, action) => {
                state.isDeleting = false;
                state.isDeleteSuccess = true;
            })
    },
})

export const { } = blogSlice.actions



export default blogSlice.reducer
