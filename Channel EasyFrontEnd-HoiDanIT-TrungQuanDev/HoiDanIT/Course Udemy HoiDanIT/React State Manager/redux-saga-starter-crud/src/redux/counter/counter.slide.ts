import { createSlice, PayloadAction, createAction } from "@reduxjs/toolkit"

export interface CounterState {
    value: number
    status: "idle" | "loading" | "failed"
}

const initialState: CounterState = {
    value: 0,
    status: "idle",
}

export const increaseSagaFinish = createAction<{ value: number }>("increaseSagaFinish");
export const decreaseSagaFinish = createAction<{ value: number }>("decreaseSagaFinish");

export const counterSlice = createSlice({
    name: "counter",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.value += 1
        },
        decrement: (state) => {
            state.value -= 1
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
            state.value += action.payload
        },

        increaseSagaStart: (state) => {
            state.status = "loading";
        },
        decreaseSagaStart: (state) => {
            state.status = "loading";
        },

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(increaseSagaFinish, (state, action) => {
                state.status = "idle";
                state.value += action.payload.value;
            })
            .addCase(decreaseSagaFinish, (state, action) => {
                state.status = "idle";
                state.value -= action.payload.value;
            })


        //   .addCase(incrementAsync.fulfilled, (state, action) => {
        //     state.status = "idle"
        //     state.value += action.payload
        //   })
        //   .addCase(incrementAsync.rejected, (state) => {
        //     state.status = "failed"
        //   })
    },
})

export const { increment, decrement, incrementByAmount,
    increaseSagaStart, decreaseSagaStart,
} = counterSlice.actions



export default counterSlice.reducer
