// K√≠ hi·ªáu üöÄ: c√≥ nghƒ©a l√† b√†i h·ªçc m·ªõi. M·ªói b√†i h·ªçc m·ªõi, m√¨nh s·∫Ω ƒë·ªÉ icon t√™n l·ª≠a (üöÄ)
/**
 * Syntax parser, Lexical Enviroment, Execution Context (Creation/Hoisting, Run Phases)üöÄ
 */
console.log('i before:', i)
var i = 10

function hello(params) {
  console.log('Duynghiadev is here', params)
}
hello(i)
console.log('i after:', i)
console.log('---------------------------------------')

/**
 * Javascript Execution Stack, Invocation v√† Variable Environment | Justin NguyenüöÄ
 * Trong b√†i n√†y ch√∫ng ta c√πng t√¨m hi·ªÉu v·ªÅ:
 * - Single thread (synchronous), Innocation and Execution stack
 */
/**
 * ƒê√¢y l√† v√≠ d·ª• 1
 */
function a() {
  b()
}
function b() {
  c()
}
function c() {
  console.log('called C')
}
a()
console.log('done function a')
console.log('---------------------------------------')

/**
 * ƒê√¢y l√† v√≠ d·ª• 2
 */
let name = ' John'

function first() {
  let a = 'Hello'
  second()
  let x = a + name
  console.log('x:', x)
}
function second() {
  let b = 'Hi'
  third()
  let z_1 = b + name
  console.log('z_1:', z_1)
}
function third() {
  let c = 'Hey!'
  let z_2 = c + name
  console.log('z_2:', z_2)
}
first()
console.log('---------------------------------------')

/**
 * ƒê√¢y l√† v√≠ d·ª• 3
 */
var i_1 = 10
function a_1() {
  var i_1 = 100
  b_1()
  console.log(`a_1 ${i_1}`)
}
function b_1() {
  var i_1 = 1000
  c_1()
  console.log(`b_1 ${i_1}`)
}
function c_1() {
  /**
   * - N·∫øu nh∆∞ m√¨nh kh√¥ng khai b√°o bi·∫øn a_1 th√¨ n√≥ s·∫Ω ch·∫°y ra ngo√†i v√† l·∫•y bi·∫øn a_1 ·ªü ngo√†i enviroment
   * - ƒê√¢y ƒë∆∞·ª£c g·ªçi l√† Variable Environment
   * - ƒê√≥ l√† ki·ªÉu khi ch√∫ng ta khai b√°o bi·∫øn v·ªõi var. C√≤n khi ch√∫ng ta khai b√°o v·ªõi bi·∫øn let th√¨ s·∫Ω n√≥ v·∫´n s·∫Ω nh∆∞ v·∫≠y th√¥i (v·∫´n gi·ªëng bi·∫øn var)
   */
  // var i_1 = 1
  console.log(`called C ${i_1}`)
}
a_1()
console.log('done function a_1')
console.log('---------------------------------------')

/**
 * Scope Chain v√† Block Scope Trong Javascript | Justin NguyenüöÄ
 */
/**
 * Trong b√†i n√†y m√¨nh h·ªçc v·ªÅ scope chain
 */
// ƒê√¢y l√† v√≠ d·ª• 1 üëç
function foo() {
  var someVar = 100
  bar()
}
function bar() {
  var someVar = 1000
  console.log(`called bar: ${someVar}`)
}
var someVar = 10
foo()
console.log('done function foo')
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 2 üëç
function foo_1() {
  function bar_1() {
    // var someVar_1 = 1000
    console.log(`called bar_1: ${someVar_1}`)
  }
  var someVar_1 = 100
  bar_1()
}
var someVar_1 = 10
foo_1()
console.log('done function foo_1')
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 3 üëç
/**
 * - T·∫•t c·∫£ c√°c v√≠ d·ª• ·ªü tr√™n l√† m√¨nh d√πng bi·∫øn var. Bi·∫øn var ƒë∆∞·ª£c hi·ªÉu n√¥m na l√† global scope ho·∫∑c l√† function scope. N√™n bi·∫øn var r·∫•t √≠t ng∆∞·ªùi d√πng. H·∫ßu nh∆∞ l√† h·ªç kh√¥ng d√πng n·ªØa m√† chuy·ªÉn qua d√πng let, const
 * - let, const l√† ES6 (ES2015) th√¨ n√≥ c√≥ h·ªó tr·ª£ block scope
 * - block scope l√† g√¨? Th√¨ n√≥ c√≥ nghƒ©a l√† c√°c d√≤ng code n·∫±m trong d·∫•u ngo·∫∑c nh·ªçn {}. ƒê√≥ l√† block scope. V√≠ d·ª• nh∆∞ c√°c d√≤ng code n·∫±m trong if else, forEach, for,...M·ªói c√°i block nh∆∞ n√†y th√¨ n√≥ s·∫Ω t·∫°o ra cho m√¨nh c√°i scope ri√™ng
 * - C√°c bi·∫øn n·∫±m trong block ƒë√≥ th√¨ bi·∫øn ƒë√≥ ch·ªâ t·ªìn t·∫°i trong scope ƒë√≥ th√¥i. N√≥ kh√¥ng ·∫£nh h∆∞·ªüng g√¨, v√† c≈©ng kh√¥ng li√™n quan ƒë·∫øn c√°c bi·∫øn b√™n ngo√†i
 */
function foo_2() {
  function bar_2() {
    let someVar_2 = 1000 // N·∫øu comment d√≤ng n√†y l·∫°i th√¨ n√≥ s·∫Ω t√¨m ra b√™n ngo√†i v√† in ra gi√° tr·ªã ƒë√≥
    console.log(`called bar_2: ${someVar_2}`)
  }
  let someVar_2 = 100
  bar_2()
}
let someVar_2 = 10
foo_2()
console.log('done function foo_2')
console.log('---------------------------------------')
