// K√≠ hi·ªáu üöÄ: c√≥ nghƒ©a l√† b√†i h·ªçc m·ªõi. M·ªói b√†i h·ªçc m·ªõi, m√¨nh s·∫Ω ƒë·ªÉ icon t√™n l·ª≠a (üöÄ)
/**
 * Syntax parser, Lexical Enviroment, Execution Context (Creation/Hoisting, Run Phases)üöÄ
 */
console.log('i before:', i)
var i = 10

function hello(params) {
  console.log('Duynghiadev is here', params)
}
hello(i)
console.log('i after:', i)
console.log('---------------------------------------')

/**
 * Javascript Execution Stack, Invocation v√† Variable Environment | Justin NguyenüöÄ
 * Trong b√†i n√†y ch√∫ng ta c√πng t√¨m hi·ªÉu v·ªÅ:
 * - Single thread (synchronous), Innocation and Execution stack
 */
/**
 * ƒê√¢y l√† v√≠ d·ª• 1
 */
function a() {
  b()
}
function b() {
  c()
}
function c() {
  console.log('called C')
}
a()
console.log('done function a')
console.log('---------------------------------------')

/**
 * ƒê√¢y l√† v√≠ d·ª• 2
 */
let name = ' John'

function first() {
  let a = 'Hello'
  second()
  let x = a + name
  console.log('x:', x)
}
function second() {
  let b = 'Hi'
  third()
  let z_1 = b + name
  console.log('z_1:', z_1)
}
function third() {
  let c = 'Hey!'
  let z_2 = c + name
  console.log('z_2:', z_2)
}
first()
console.log('---------------------------------------')

/**
 * ƒê√¢y l√† v√≠ d·ª• 3
 */
var i_1 = 10
function a_1() {
  var i_1 = 100
  b_1()
  console.log(`a_1 ${i_1}`)
}
function b_1() {
  var i_1 = 1000
  c_1()
  console.log(`b_1 ${i_1}`)
}
function c_1() {
  /**
   * - N·∫øu nh∆∞ m√¨nh kh√¥ng khai b√°o bi·∫øn a_1 th√¨ n√≥ s·∫Ω ch·∫°y ra ngo√†i v√† l·∫•y bi·∫øn a_1 ·ªü ngo√†i enviroment
   * - ƒê√¢y ƒë∆∞·ª£c g·ªçi l√† Variable Environment
   * - ƒê√≥ l√† ki·ªÉu khi ch√∫ng ta khai b√°o bi·∫øn v·ªõi var. C√≤n khi ch√∫ng ta khai b√°o v·ªõi bi·∫øn let th√¨ s·∫Ω n√≥ v·∫´n s·∫Ω nh∆∞ v·∫≠y th√¥i (v·∫´n gi·ªëng bi·∫øn var)
   */
  // var i_1 = 1
  console.log(`called C ${i_1}`)
}
a_1()
console.log('done function a_1')
console.log('---------------------------------------')

/**
 * Scope Chain v√† Block Scope Trong Javascript | Justin NguyenüöÄ
 */
/**
 * Trong b√†i n√†y m√¨nh h·ªçc v·ªÅ scope chain
 */
// ƒê√¢y l√† v√≠ d·ª• 1 üëç
function foo() {
  var someVar = 100
  bar()
}
function bar() {
  var someVar = 1000
  console.log(`called bar: ${someVar}`)
}
var someVar = 10
foo()
console.log('done function foo')
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 2 üëç
function foo_1() {
  function bar_1() {
    // var someVar_1 = 1000
    console.log(`called bar_1: ${someVar_1}`)
  }
  var someVar_1 = 100
  bar_1()
}
var someVar_1 = 10
foo_1()
console.log('done function foo_1')
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 3 üëç
/**
 * - T·∫•t c·∫£ c√°c v√≠ d·ª• ·ªü tr√™n l√† m√¨nh d√πng bi·∫øn var. Bi·∫øn var ƒë∆∞·ª£c hi·ªÉu n√¥m na l√† global scope ho·∫∑c l√† function scope. N√™n bi·∫øn var r·∫•t √≠t ng∆∞·ªùi d√πng. H·∫ßu nh∆∞ l√† h·ªç kh√¥ng d√πng n·ªØa m√† chuy·ªÉn qua d√πng let, const
 * - let, const l√† ES6 (ES2015) th√¨ n√≥ c√≥ h·ªó tr·ª£ block scope
 * - block scope l√† g√¨? Th√¨ n√≥ c√≥ nghƒ©a l√† c√°c d√≤ng code n·∫±m trong d·∫•u ngo·∫∑c nh·ªçn {}. ƒê√≥ l√† block scope. V√≠ d·ª• nh∆∞ c√°c d√≤ng code n·∫±m trong if else, forEach, for,...M·ªói c√°i block nh∆∞ n√†y th√¨ n√≥ s·∫Ω t·∫°o ra cho m√¨nh c√°i scope ri√™ng
 * - C√°c bi·∫øn n·∫±m trong block ƒë√≥ th√¨ bi·∫øn ƒë√≥ ch·ªâ t·ªìn t·∫°i trong scope ƒë√≥ th√¥i. N√≥ kh√¥ng ·∫£nh h∆∞·ªüng g√¨, v√† c≈©ng kh√¥ng li√™n quan ƒë·∫øn c√°c bi·∫øn b√™n ngo√†i
 */
function foo_2() {
  function bar_2() {
    let someVar_2 = 1000 // N·∫øu comment d√≤ng n√†y l·∫°i th√¨ n√≥ s·∫Ω t√¨m ra b√™n ngo√†i v√† in ra gi√° tr·ªã ƒë√≥
    console.log(`called bar_2: ${someVar_2}`)
  }
  let someVar_2 = 100
  bar_2()
}
let someVar_2 = 10
foo_2()
console.log('done function foo_2')
console.log('---------------------------------------')

/**
 * By Value vs By Reference Trong Javascript | Justin NguyenüöÄ
 */
/**
 * - ·ªû trong b√†i n√†y th√¨ ch√∫ng ta c√πng t√¨m hi·ªÉu v·ªÅ Static types, Dynamic types, Primitive types (ki·ªÉu nguy√™n th·ªßy), Object
 * - By value v√† By references
 *
 * - T·∫•t c·∫£ c√°c ki·ªÉu primitive type ƒë·ªÅu l√† tham tr·ªã (pass by value)
 * - C√≤n t·∫•t c·∫£ c√°c ki·ªÉu m√† m√¨nh khai b√°o ki·ªÉu object th√¨ ƒë·ªÅu l√† tham chi·∫øu (pass by reference)
 *
 * - Primitive type: ƒë∆∞·ª£c g√°n theo gi√° tr·ªã
 * - Object type: ƒë∆∞·ª£c g√°n theo v√πng nh·ªõ
 */
var num = 10
var str = 'Duy Nghia Dev'
str = 'Ku Nhi' // ch√∫ng ta c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã c·ªßa bi·∫øn ƒë√£ khai b√°o tr∆∞·ªõc ƒë√≥ r·ªìi

var num1 = num
num = 100
console.log('num1:', num1)
console.log('num:', num)
console.log('---------------------------------------')

var obj = { str: 'hello duynghiadev' }
var objRef = obj
obj.str = 'Updated str'
console.log('objRef:', objRef)
hello_1(obj) // Khi ch·∫°y ƒë·∫øn d√≤ng n√†y th√¨ params trong obj.str ƒë√£ thay ƒë·ªïi th√†nh r·ªìi, v√¨ tham s·ªë m√¨nh truy·ªÅn v√†o v√† bi·∫øn obj c√≥ chung 1 v√πng nh·ªõ
console.log('obj:', obj) // Khi log ra th√¨ obj s·∫Ω nh·∫≠n gi√° tr·ªã m·ªõi trong h√†m hello_1
console.log('obj.str:', obj.str)
console.log('---------------------------------------')

function hello_1(object) {
  object.str = 'Inline function'
}

/**
 * T·∫°i Sao 2 + 2 = 22 Trong Javascript | Justin NguyenüöÄ
 */
/**
 * - Coercion, Precedence, Associativity
 * - Comparision table, Booleans in Existence
 *
 * - L∆∞u √Ω: Kh√¥ng c√≥ gi√° tr·ªã l√† null ho·∫∑c undefined
 */
var num3 = 2
var num4 = '2'
var num5 = 0
var totalNum = num3 + num4
console.log('totalNum:', totalNum)
console.log('typeof totalNum:', typeof totalNum)
console.log('---------------------------------------')

if (num3 == num4) {
  console.log('B·∫±ng nhau')
} else {
  console.log('Kh√¥ng b·∫±ng nhau')
}
console.log('---------------------------------------')

if (num3 === num4) {
  console.log('B·∫±ng nhau')
} else {
  console.log('Kh√¥ng b·∫±ng nhau')
}
console.log('---------------------------------------')

if (num5) {
  console.log(`C√≥ gi√° tr·ªã, num5 l√† ${num5}`)
} else {
  console.log(`Kh√¥ng c√≥ gi√° tr·ªã, num5 l√† ${num5}`)
}
console.log('---------------------------------------')

if (num5 || num5 === 0) {
  console.log(`C√≥ gi√° tr·ªã, num5 l√† ${num5}`)
} else {
  console.log(`Kh√¥ng c√≥ gi√° tr·ªã, num5 l√† ${num5}`)
}
console.log('---------------------------------------')

/**
 * CLOSURE Trong Javascript L√† G√¨üöÄ
 */
/**
 * JavaScript Closure (Lexical -> Closure, Factory method)
 *
 * ƒê√¢y l√† v√≠ d·ª• 1üëç
 */
var say = 'Hello Ku Nhi Dev'
function hello_2() {
  var say = 'Hello DuyNghiaDev in function hello_2'
  function sayHello() {
    console.log('say in function hello_2:', say)
  }
  sayHello()
}
hello_2()
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 2üëç
function hello_3() {
  var say = 'Hello DuyNghiaDev in function hello_3' // outer
  function sayHello_1(name) {
    console.log(`say in function hello_3: ${say} ${name}`) // local
  }
  return sayHello_1
}
const callSayHello = hello_3()
callSayHello('Justin')
console.log('callSayHelo:', callSayHello)
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 3üëç
function hello_4(say) {
  function sayHello(name) {
    console.log(`${say} ${name}`)
  }
  return sayHello
}
const sayEn = hello_4('Hello')
const sayVn = hello_4('Xin ch√†o')
sayEn('Justin')
sayVn('Duy Nghƒ©a')
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 4üëç
/**
 * - N·∫øu nh∆∞ ta l√†m c√°ch n√†y th√¨ s·∫Ω sai quy t·∫Øc closure
 * - Khi ta l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa callSays th√¨ n√≥ c√≥ gi√° tr·ªã l√† 5, v√† c·ª© th·∫ø khi ta g·ªçi t·∫•t c·∫£ ph·∫ßn t·ª≠ trong ƒë√≥ th√¨ n√≥ c≈©ng c√≥ gi√° tr·ªã l√† 5
 *
 * - T·∫°i sao l·∫°i v·∫≠y? Ta s·∫Ω s·ª≠a khai b√°o bi·∫øn t·ª´ var th√†nh let. V√† s·ª≠a function b√¨nh th∆∞·ªùng th√†nh arrow function
 *  - V√¨ var scope l√† function cho n√™n n√≥ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo v√≤ng l·∫∑p, c√≤n let scope l√† block (v√≤ng l·∫∑p) cho n√™n m·ªói l·∫ßn l·∫∑p l√† c√≥ c√°i value ri√™ng c·ªßa n√≥
 *  - V√¨ m·ªói khi let l·∫∑p qua th√¨ m·ªói ph·∫ßn t·ª≠ c·ªßa n√≥ ƒë·ªÅu c√≥ gi√° tr·ªã ri√™ng v√† kh√¥ng b·ªã ghi ƒë√®
 *  - C√≤n var th√¨ khi l·∫∑p qua, n√≥ c√≥ gi√° tr·ªã v√† l·∫ßn l·∫∑p ti·∫øp theo th√¨ n√≥ b·ªã ghi ƒë√®. Cho n√™n khi l·∫∑p qua th√¨ n√≥ c√≥ 1 gi√° tr·ªã th√¥i
 *
 *  - gi·∫£i ph√°p b√†i n√†y n·∫±m ·ªü v√≠ d·ª• 5‚úÖ
 */
function hello_5() {
  var says = []
  for (var index = 0; index < 5; index++) {
    says.push(function () {
      console.log('index:', index)
    })
  }
  return says
}
const callSays = hello_5()
console.log('callSays:', callSays)
callSays[0]()
callSays[1]()
callSays[2]()
callSays[3]()
callSays[4]()
console.log('---------------------------------------')

// ƒê√¢y l√† v√≠ d·ª• 5üëç
function hello_6() {
  var says = []
  for (let index = 0; index < 5; index++) {
    says.push(() => {
      console.log('index:', index)
    })
  }
  return says
}
const callSays_1 = hello_6()
console.log('callSays_1:', callSays_1)
callSays_1[0]()
callSays_1[1]()
callSays_1[2]()
callSays_1[3]()
callSays_1[4]()
console.log('---------------------------------------')

/**
 * H√†m Bind vs Call vs Apply Trong Javascript | Justin Nguyen üöÄ
 */
/**
 * - Trong b√†i n√†y ch√∫ng ta h·ªçc v·ªÅ JavaScript bind, call and apply
 * - D∆∞·ªõi ƒë√¢y l√† v√≠ d·ª• v·ªÅ g·ªçi h√†m v√† truy·ªÅn tham s·ªë theo c√°ch b√¨nh th∆∞·ªùng ‚úÖ
 */
function multiply(a, b) {
  return a * b
}
const multiplyByTwo = (a) => multiply(2, a)
const multiplyByTen = (a) => multiply(10, a)
console.log(multiplyByTwo(2))
console.log(multiplyByTen(10))
console.log('---------------------------------------')

// D∆∞·ªõi ƒë√¢y ch√∫ng ta g·ªçi h√†m v√† truy·ªÅn tham s·ªë theo c√°ch d√πng method bind()‚úÖ
function multiply_1(a, b) {
  return a * b
}
const multiplyByTwo_1 = multiply_1.bind(this, 2)
const multiplyByTen_1 = multiply_1.bind(this, 10)
console.log('D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ m√¨nh s·ª≠ d·ª•ng method bind()')
console.log(multiplyByTwo_1(2))
console.log(multiplyByTen_1(10))
console.log('---------------------------------------')

// V√≠ d·ª• 3‚úÖ
const vanhein = {
  weapon: 'Phi Ti√™u',
  attack() {
    console.log('this in function vanhein:', this)
    console.log('Attacked by:', this.weapon)
  }
}
vanhein.attack()

const yorn = {
  weapon: 'Bow',
  attack() {
    console.log('this in function yorn:', this)
    console.log('Attacked by:', this.weapon)
  }
}
yorn.attack()
console.log('---------------------------------------')

/**
 * - Khi ch√∫ng ta s·ª≠ d·ª•ng h√†m bind th√¨ trong h√†m yorn ch√∫ng ta kh√¥ng c·∫ßn khai b√°o h√†m attack. M√† thay v√†o ƒë√≥ ch√∫ng ta m∆∞·ª£n h√†m attack ƒë√≥ h√†m vanhein, v√† g·ªçi h√†m ƒë√≥ trong h√†m yorn.
 * - D√πng h√†m bind trong ƒë√≥ c√≥ nghƒ©a l√† ch√∫ng ta ƒëang copy h√†m yorn_1 trong h√†m attack ·ªü trong h√†m h√†m vanhein. K·∫øt qu·∫£ th√¨ ƒë√∫ng y chang
 *
 * - D√≤ng vanhein.attack.bind(yorn_1)() c√≥ √Ω nghƒ©a l√†:‚ùå‚ùå‚ùå
 *  - Ch√∫ng ta bind h√†m yorn_1 v√†o trong h√†m vanhein
 *  - Ti·∫øp theo ƒë√≥ khi n√≥ ch·∫°y ƒë·∫øn d√≤ng log c√≥ this th√¨ n√≥ s·∫Ω log ra c√°c thu·ªôc t√≠nh trong h√†m yorn_1. N√≥ s·∫Ω in ra {weapon: 'Bow'}
 *  - V√† trong d√≤ng log ti·∫øp theo c√≥ t·ª´ this.weapon, th√¨ n√≥ s·∫Ω in ra => Attacked by: Bow
 *
 * - Ki·∫øn th·ª©c n√†y h∆°i kh√≥ hi·ªÉu, c√°c b·∫°n c√≥ th·ªÉ search google ƒë·ªÉ xem th√™m cho hi·ªÉu
 */
const yorn_1 = {
  weapon: 'Bow'
}
console.log('D∆∞·ªõi ƒë√¢y ch√∫ng ta s·ª≠ d·ª•ng method bind')
vanhein.attack()
vanhein.attack.bind(yorn_1)()
console.log('---------------------------------------')

/**
 * - Method call c√≥ nghƒ©a l√† ch√∫ng ta m∆∞·ª£n h√†m vanhein, nh∆∞ng ch√∫ng ta g·ªçi n√≥ trong c√°i context (ng·ªØ c·∫£nh) l√† h√†m yorn_1 n√†y, th√¨ c√°i this n√≥ v·∫´n y chang khi ta s·ª≠ d·ª•ng method bind v·∫≠y th√¥i
 *
 * - Method apply th√¨ c≈©ng nh∆∞ v·∫≠y, nh∆∞ng c√≥ ƒëi·ªÅu l√† n√≥ kh√°c 1 ch√∫t so v·ªõi ph∆∞∆°ng th·ª©c call
 *  - N√≥ kh√°c ·ªü ch·ªó t·ª´ tham s·ªë th·ª© 2 tr·ªü ƒëi. Thay v√¨ m√¨nh truy·ªÅn t·ª´ng tham s·ªë ri√™ng l·∫ª -> call(yorn_1, 1, 2, 3). Th√¨ so v·ªõi h√†m apply th√¨ ch√∫ng ta kh√¥ng truy·ªÅn nh∆∞ v·∫≠y n·ªØa, m√† ph·∫£i truy·ªÅn v√†o h√†m apply m·ªôt m·∫£ng c√°c tham s·ªë
 *  - Th√¨ c√°i call v√† apply n√≥ ch·ªâ kh√°c nhau nh∆∞ v·∫≠y m√† th√¥i
 *
 * - Ch√∫ √Ω:‚ùå‚ùå‚ùå
 *  - Khi ch√∫ng ta s·ª≠ d·ª•ng bind th√¨ ph·∫£i th√™m d·∫•u ngo·∫∑c ƒë·ªÉ th·ª±c thi h√†m
 *  - C√≤n ch√∫ng ta s·ª≠ d·ª•ng call th√¨ kh√¥ng c·∫ßn ph·∫£i th√™m d·∫•u ngo·∫∑c
 */
console.log('D∆∞·ªõi ƒë√¢y ch√∫ng ta s·ª≠ d·ª•ng method call')
vanhein.attack()
vanhein.attack.call(yorn_1)
console.log('---------------------------------------')

console.log('D∆∞·ªõi ƒë√¢y ch√∫ng ta s·ª≠ d·ª•ng method apply')
vanhein.attack()
vanhein.attack.apply(yorn_1)
console.log('---------------------------------------')

// Ti·∫øp n·ªëi v√≠ d·ª• tr∆∞·ªõc, nh∆∞ng m√¨nh t√°ch ra cho d·ªÖ h√¨nh dung‚úÖ
const vanhein_1 = {
  weapon: 'Phi Ti√™u',
  attack(skill) {
    if (skill) {
      console.log('this in function vanhein:', this)
      console.log('Skill Attacked by:', this.weapon)
    } else {
      console.log('Attacked by:', this.weapon)
    }
  }
}
vanhein_1.attack()
console.log('D∆∞·ªõi ƒë√¢y ch√∫ng ta s·ª≠ d·ª•ng method call v√† c√≥ tham s·ªë th·ª© 2')
vanhein_1.attack.call(yorn_1, true)
console.log('---------------------------------------')

vanhein_1.attack()
console.log('D∆∞·ªõi ƒë√¢y ch√∫ng ta s·ª≠ d·ª•ng method apply v√† c√≥ tham s·ªë th·ª© 2')
vanhein_1.attack.apply(yorn_1, [true])
console.log('---------------------------------------')

console.log(
  'V·∫´n g·ªçi method apply nh∆∞ th·∫ø, nh∆∞ng ch√∫ng ta bi·∫øn t·∫•u 1 x√≠u, ƒë·∫∑t tham s·ªë th·ª© 2 ra th√†nh 1 bi·∫øn'
)
vanhein_1.attack()
const params = [true]
vanhein_1.attack.apply(yorn_1, params)
console.log('---------------------------------------')

console.log(
  'V·∫´n g·ªçi method call nh∆∞ th·∫ø, nh∆∞ng ch√∫ng ta bi·∫øn t·∫•u 1 x√≠u, ƒë·∫∑t tham s·ªë th·ª© 2 ra th√†nh 1 bi·∫øn. N·∫øu khi ta d√πng method call th√¨ ta ph·∫£i s·ª≠ d·ª•ng to√°n t·ª≠ spread (ES6), th√¨ n√≥ s·∫Ω chuy·ªÉn c√°i m·∫£ng n√†y nh·ªØng tham s·ªë ri√™ng l·∫ª'
)
const params_1 = [true]
vanhein_1.attack()
vanhein_1.attack.call(yorn_1, ...params_1)
console.log('---------------------------------------')
