/**
 * Generated by orval v6.18.1 🍺
 * Do not edit manually.
 * Swagger API
 * This is a swagger for API.
 * OpenAPI spec version: 1.0
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'

export const getGetBooksMock = () => ({
  data: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      author: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      topic: faker.helpers.arrayElement([
        {
          code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        },
        undefined,
      ]),
    })),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([
    {
      hasNext: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      page: faker.number.int({ min: undefined, max: undefined }),
      pageSize: faker.number.int({ min: undefined, max: undefined }),
      sort: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      totalPages: faker.number.int({ min: undefined, max: undefined }),
      totalRecords: faker.number.int({ min: undefined, max: undefined }),
    },
    undefined,
  ]),
})

export const getCreateBookMock = () => ({
  data: faker.helpers.arrayElement([
    {
      author: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      topic: faker.helpers.arrayElement([
        {
          code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
})

export const getGetBookMock = () => ({
  data: faker.helpers.arrayElement([
    {
      author: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      topic: faker.helpers.arrayElement([
        {
          code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
})

export const getUpdateBookMock = () => ({
  data: faker.helpers.arrayElement([
    {
      author: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      topic: faker.helpers.arrayElement([
        {
          code: faker.helpers.arrayElement([faker.word.sample(), undefined]),
          id: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
})

export const getDeleteBookMock = () => ({
  data: faker.helpers.arrayElement([
    { message: faker.word.sample() },
    undefined,
  ]),
})

export const getBookMSW = () => [
  rest.get('*/books', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetBooksMock()),
    )
  }),
  rest.post('*/books', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCreateBookMock()),
    )
  }),
  rest.get('*/books/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGetBookMock()),
    )
  }),
  rest.put('*/books/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUpdateBookMock()),
    )
  }),
  rest.delete('*/books/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDeleteBookMock()),
    )
  }),
]
