/**
 * map() creates a new array from calling a function for every array element.
 * map() does not execute the function for empty elements.
 * map() does not change the original array.
 */

/**
 * - D∆∞·ªõi ƒë√¢y l√† demo c·ªßa method map üëá
 */
const ages = [1, 30, 19, 20]

const map = ages.map(function (element) {
  return element * 2
})
console.log('map:', map)

/**
 * - Sau ƒë√¢y l√† m√¨nh s·∫Ω build l·∫°i h√†m map theo c√°ch custom method üëá
 */
Array.prototype.mapCustom = function (callback) {
  let newArray = []

  console.log('map running')
  for (const age of this) {
    const elementChange = callback(age)
    console.log('elementChange:', elementChange)
    newArray.push(elementChange)
    console.log('newArray:', newArray)
  }
  return newArray
}

// M√¨nh h·ª©ng c√°c gi√° tr·ªã c·ªßa h√†m map v√†o 1 bi·∫øn (ƒë√≥ l√† map_1) => sau ƒë√≥ m√¨nh ƒë·∫∑t bi·∫øn map_1 b·∫±ng gi√° tr·ªã c·ªßa h√†m mapCustom => Cho n√™n khi m√¨nh log ra bi·∫øn map_1 th√¨ n√≥ s·∫Ω in ra c√°c gi√° tr·ªã trong bi·∫øn newArray (Do h√†m mapCustom n√≥ return v·ªÅ bi·∫øn newArray)
const map_1 = ages.mapCustom(function (element) {
  console.log('element:', element)
  /**
   * - Trong h√†m n√†y d√π m√¨nh c√≥ khai b√°o nh·ªØng d√≤ng code g√¨ ƒëi chƒÉng n·ªØa => th√¨ khi ch·∫°y code th√¨ s·∫Ω kh√¥ng v√†o h√†m n√†y
   * - Nh·ªØng ƒëo·∫°n code trong h√†m n√†y ch·ªâ ch·∫°y khi m√¨nh truy·ªÅn h√†m n√†y nh∆∞ 1 tham s·ªë (callback) v√† g·ªçi callback ƒë√≥ th·ª±c thi th√¨ nh·ªØng d√≤ng code trong n√†y s·∫Ω ch·∫°y
   */
  return element * 2
})
console.log('===================================')
console.log('map_1:', map_1)
