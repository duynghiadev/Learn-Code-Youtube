{"ast":null,"code":"import { useState } from \"react\";\nexport function useFetch(endpoint) {\n  const {\n    0: fetchResult,\n    1: setFetchResult\n  } = useState({\n    loading: false\n  });\n\n  const fetchData = async () => {\n    try {\n      setFetchResult({\n        loading: true\n      });\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      setFetchResult({\n        loading: false\n      });\n      return data;\n    } catch (err) {\n      setFetchResult({\n        loading: false,\n        error: err.message\n      });\n    }\n  };\n\n  return [fetchData, {\n    loading: fetchResult.loading,\n    error: fetchResult.error\n  }];\n}","map":{"version":3,"sources":["E:/study code/Study Code Project Youtube/Learn Code YouTube/test code javascript/JavaScript/Son Dang/blog-examples/when-to-use-useCallback/queries/hooks/useFetch.ts"],"names":["useState","useFetch","endpoint","fetchResult","setFetchResult","loading","fetchData","response","fetch","data","json","err","error","message"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAMA,OAAO,SAASC,QAAT,CAAkBC,QAAlB,EAAiD;AACtD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCJ,QAAQ,CAAkB;AAC9DK,IAAAA,OAAO,EAAE;AADqD,GAAlB,CAA9C;;AAIA,QAAMC,SAAS,GAAG,YAAY;AAC5B,QAAI;AACFF,MAAAA,cAAc,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAd;AACA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAACN,QAAD,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAN,MAAAA,cAAc,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAd;AAEA,aAAOI,IAAP;AAED,KARD,CAQE,OAAOE,GAAP,EAAY;AACZP,MAAAA,cAAc,CAAC;AACbC,QAAAA,OAAO,EAAE,KADI;AAEbO,QAAAA,KAAK,EAAED,GAAG,CAACE;AAFE,OAAD,CAAd;AAID;AAGF,GAjBD;;AAmBA,SAAO,CAAEP,SAAF,EAAa;AAClBD,IAAAA,OAAO,EAAEF,WAAW,CAACE,OADH;AAElBO,IAAAA,KAAK,EAAET,WAAW,CAACS;AAFD,GAAb,CAAP;AAID","sourcesContent":["import { useState } from \"react\"\nimport { FetchResultType } from \"types\"\n\ntype FetchType = () => Promise<any>\ntype UseFetchType = [FetchType, FetchResultType]\n\nexport function useFetch(endpoint:string): UseFetchType {\n  const [fetchResult, setFetchResult] = useState<FetchResultType>({\n    loading: false,\n  })\n\n  const fetchData = async () => {\n    try {\n      setFetchResult({ loading: true })\n      const response = await fetch(endpoint)\n      const data = await response.json()\n      setFetchResult({ loading: false })\n\n      return data\n\n    } catch (err) {\n      setFetchResult({\n        loading: false,\n        error: err.message,\n      })\n    }\n\n    \n  }\n\n  return [ fetchData, {\n    loading: fetchResult.loading,\n    error: fetchResult.error \n  }]\n}"]},"metadata":{},"sourceType":"module"}