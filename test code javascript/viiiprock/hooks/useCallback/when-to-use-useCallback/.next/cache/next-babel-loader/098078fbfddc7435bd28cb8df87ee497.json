{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { STORAGE_KEY } from \"./constants\"; // updateTodos batch update todo list in local\n// use for #2 requirement\n\nexport function updateTodos(currentItems, newItem) {\n  var updated = [newItem].concat(_toConsumableArray(currentItems));\n  return localStorage.setItem(STORAGE_KEY, JSON.stringify(updated));\n} // updateTodo updates specific data (batch update) \n// use for #2 requirement\n\nexport function updateTodo(currentItems, _ref) {\n  var id = _ref.id,\n      status = _ref.status;\n  var indexedId = currentItems.findIndex(function (item) {\n    return item.id === id;\n  });\n  currentItems[indexedId].status = status;\n  return localStorage.setItem(STORAGE_KEY, JSON.stringify(currentItems));\n} // updateLocalTodoStatus updates local status for individual todo\n// use for #1 requirement\n\nexport var updateLocalTodoStatus = function updateLocalTodoStatus(taskId, status) {\n  var localData = [];\n  var getLocalData = localStorage.getItem(\"tasks\");\n\n  if (getLocalData) {\n    localData = JSON.parse(getLocalData);\n  }\n\n  var indexedId = localData.findIndex(function (item) {\n    return item.id === taskId;\n  });\n  localData[indexedId].status = status;\n  return localStorage.setItem(STORAGE_KEY, JSON.stringify(localData));\n};","map":{"version":3,"sources":["E:/study code/Study Code Project Youtube/Learn Code YouTube/test code javascript/JavaScript/Son Dang/blog-examples/when-to-use-useCallback/common/utils.ts"],"names":["STORAGE_KEY","updateTodos","currentItems","newItem","updated","localStorage","setItem","JSON","stringify","updateTodo","id","status","indexedId","findIndex","item","updateLocalTodoStatus","taskId","localData","getLocalData","getItem","parse"],"mappings":";AACA,SAAqBA,WAArB,QAAwC,aAAxC,C,CAEA;AACA;;AACA,OAAO,SAASC,WAAT,CAAwBC,YAAxB,EAA2CC,OAA3C,EAAuD;AAC5D,MAAMC,OAAO,IAAGD,OAAH,4BAAeD,YAAf,EAAb;AACA,SAAOG,YAAY,CAACC,OAAb,CAAqBN,WAArB,EAAkCO,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAAlC,CAAP;AACD,C,CAED;AACA;;AACA,OAAO,SAASK,UAAT,CAAoBP,YAApB,QAA6D;AAAA,MAAlBQ,EAAkB,QAAlBA,EAAkB;AAAA,MAAdC,MAAc,QAAdA,MAAc;AAClE,MAAMC,SAAS,GAAGV,YAAY,CAACW,SAAb,CAAuB,UAACC,IAAD;AAAA,WAAeA,IAAI,CAACJ,EAAL,KAAYA,EAA3B;AAAA,GAAvB,CAAlB;AACAR,EAAAA,YAAY,CAACU,SAAD,CAAZ,CAAwBD,MAAxB,GAAiCA,MAAjC;AACA,SAAON,YAAY,CAACC,OAAb,CAAqBN,WAArB,EAAkCO,IAAI,CAACC,SAAL,CAAeN,YAAf,CAAlC,CAAP;AACD,C,CAED;AACA;;AACA,OAAO,IAAMa,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,MAAD,EAAgBL,MAAhB,EAAsC;AACzE,MAAIM,SAAa,GAAG,EAApB;AACA,MAAMC,YAAY,GAAGb,YAAY,CAACc,OAAb,CAAqB,OAArB,CAArB;;AACA,MAAGD,YAAH,EAAiB;AACfD,IAAAA,SAAS,GAAGV,IAAI,CAACa,KAAL,CAAWF,YAAX,CAAZ;AACD;;AAED,MAAMN,SAAS,GAAGK,SAAS,CAACJ,SAAV,CAAoB,UAACC,IAAD;AAAA,WAAwBA,IAAI,CAACJ,EAAL,KAAYM,MAApC;AAAA,GAApB,CAAlB;AACAC,EAAAA,SAAS,CAACL,SAAD,CAAT,CAAqBD,MAArB,GAA8BA,MAA9B;AACA,SAAON,YAAY,CAACC,OAAb,CAAqBN,WAArB,EAAkCO,IAAI,CAACC,SAAL,CAAeS,SAAf,CAAlC,CAAP;AACD,CAVM","sourcesContent":["import { TaskPropsType } from \"types\"\nimport { StatusEnum, STORAGE_KEY } from \"./constants\"\n\n// updateTodos batch update todo list in local\n// use for #2 requirement\nexport function updateTodos<T>(currentItems: T[], newItem: T) {\n  const updated =[newItem, ...currentItems]\n  return localStorage.setItem(STORAGE_KEY, JSON.stringify(updated))\n}\n\n// updateTodo updates specific data (batch update) \n// use for #2 requirement\nexport function updateTodo(currentItems: any[], { id, status }:any) {\n  const indexedId = currentItems.findIndex((item: any) => item.id === id)\n  currentItems[indexedId].status = status\n  return localStorage.setItem(STORAGE_KEY, JSON.stringify(currentItems))\n}\n\n// updateLocalTodoStatus updates local status for individual todo\n// use for #1 requirement\nexport const updateLocalTodoStatus = (taskId:number, status:StatusEnum) => {\n  let localData:any = []\n  const getLocalData = localStorage.getItem(\"tasks\")\n  if(getLocalData) {\n    localData = JSON.parse(getLocalData)\n  }\n\n  const indexedId = localData.findIndex((item:TaskPropsType) => item.id === taskId)\n  localData[indexedId].status = status\n  return localStorage.setItem(STORAGE_KEY, JSON.stringify(localData))\n}"]},"metadata":{},"sourceType":"module"}