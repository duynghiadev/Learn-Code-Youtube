{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport function usePost(endpoint) {\n  _s();\n\n  var _useState = useState({\n    loading: false\n  }),\n      _useState$ = _useState[0],\n      loading = _useState$.loading,\n      error = _useState$.error,\n      setFetchResult = _useState[1];\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var postData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n      var post, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setFetchResult({\n                loading: true\n              });\n              _context.next = 4;\n              return fetch(endpoint, {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(input)\n              });\n\n            case 4:\n              post = _context.sent;\n              _context.next = 7;\n              return post.json();\n\n            case 7:\n              response = _context.sent;\n              setData(response);\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              setFetchResult({\n                loading: false,\n                error: _context.t0.message\n              });\n\n            case 14:\n              setFetchResult({\n                loading: false\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function postData(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return [postData, {\n    data: data,\n    loading: loading,\n    error: error\n  }];\n}\n\n_s(usePost, \"ec/HPJM7hlmUqsZrJgdHctHIfRg=\");","map":{"version":3,"sources":["E:/study code/Study Code Project Youtube/Learn Code YouTube/test code javascript/JavaScript/Son Dang/blog-examples/when-to-use-useCallback/queries/hooks/usePost.ts"],"names":["useState","usePost","endpoint","loading","error","setFetchResult","data","setData","postData","input","fetch","method","headers","body","JSON","stringify","post","json","response","message"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAMA,OAAO,SAASC,OAAT,CAAiBC,QAAjB,EAAgD;AAAA;;AAAA,kBACRF,QAAQ,CAAkB;AACrEG,IAAAA,OAAO,EAAE;AAD4D,GAAlB,CADA;AAAA;AAAA,MAC5CA,OAD4C,cAC5CA,OAD4C;AAAA,MACnCC,KADmC,cACnCA,KADmC;AAAA,MAC1BC,cAD0B;;AAAA,mBAI7BL,QAAQ,EAJqB;AAAA,MAI9CM,IAJ8C;AAAA,MAIxCC,OAJwC;;AAMrD,MAAMC,QAAkB;AAAA,wEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvBJ,cAAAA,cAAc,CAAC;AAAEF,gBAAAA,OAAO,EAAE;AAAX,eAAD,CAAd;AAFuB;AAAA,qBAIJO,KAAK,CAACR,QAAD,EAAW;AACjCS,gBAAAA,MAAM,EAAE,MADyB;AAEjCC,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT,iBAFwB;AAKjCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,KAAf;AAL2B,eAAX,CAJD;;AAAA;AAIjBO,cAAAA,IAJiB;AAAA;AAAA,qBAYAA,IAAI,CAACC,IAAL,EAZA;;AAAA;AAYjBC,cAAAA,QAZiB;AAavBX,cAAAA,OAAO,CAACW,QAAD,CAAP;AAbuB;AAAA;;AAAA;AAAA;AAAA;AAevBb,cAAAA,cAAc,CAAC;AACbF,gBAAAA,OAAO,EAAE,KADI;AAEbC,gBAAAA,KAAK,EAAE,YAAIe;AAFE,eAAD,CAAd;;AAfuB;AAoBzBd,cAAAA,cAAc,CAAC;AAAEF,gBAAAA,OAAO,EAAE;AAAX,eAAD,CAAd;;AApByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBK,QAAkB;AAAA;AAAA;AAAA,KAAxB;;AAuBA,SAAO,CAACA,QAAD,EAAW;AAAEF,IAAAA,IAAI,EAAJA,IAAF;AAAQH,IAAAA,OAAO,EAAPA,OAAR;AAAiBC,IAAAA,KAAK,EAALA;AAAjB,GAAX,CAAP;AACD;;GA9BeH,O","sourcesContent":["import { useState } from \"react\"\nimport { FetchResultType } from \"types\"\n\ntype PostType = (input: any) => Promise<any>\ntype UsePostType = [PostType, FetchResultType]\n\nexport function usePost(endpoint: string): UsePostType {\n  const [{ loading, error }, setFetchResult] = useState<FetchResultType>({\n    loading: false,\n  })\n  const [data, setData] = useState<any>()\n\n  const postData: PostType = async (input) => {\n    try {\n      setFetchResult({ loading: true })\n\n      const post = await fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(input),\n      })\n\n      const response = await post.json()\n      setData(response)\n    } catch (err) {\n      setFetchResult({\n        loading: false,\n        error: err.message,\n      })\n    }\n    setFetchResult({ loading: false })\n  }\n\n  return [postData, { data, loading, error }]\n}\n"]},"metadata":{},"sourceType":"module"}