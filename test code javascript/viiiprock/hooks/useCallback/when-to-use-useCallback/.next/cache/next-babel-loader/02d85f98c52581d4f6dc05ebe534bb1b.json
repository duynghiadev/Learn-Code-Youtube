{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\study code\\\\Study Code Project Youtube\\\\Learn Code YouTube\\\\test code javascript\\\\JavaScript\\\\Son Dang\\\\blog-examples\\\\when-to-use-useCallback\\\\pages\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Container, List, ListItem } from \"@material-ui/core\";\nimport { ADD_TODO, TODOS } from \"queries/endpoints\";\nimport TaskInput from \"components/TaskInput\";\nimport TaskListItem from \"components/TaskListItem\";\nimport { useEffect, useState } from \"react\";\nimport { useFetch } from \"queries/hooks/useFetch\";\nimport { usePost } from \"queries/hooks/usePost\";\n\nfunction Home() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      tasks = _useState[0],\n      setTasks = _useState[1];\n\n  var _useFetch = useFetch(TODOS),\n      _useFetch2 = _slicedToArray(_useFetch, 2),\n      fetchData = _useFetch2[0],\n      _useFetch2$ = _useFetch2[1],\n      loading = _useFetch2$.loading,\n      error = _useFetch2$.error;\n\n  useEffect(function () {\n    fetchData().then(function (data) {\n      setTasks(data);\n    });\n  }, []);\n\n  var _usePost = usePost(ADD_TODO),\n      _usePost2 = _slicedToArray(_usePost, 2),\n      postData = _usePost2[0],\n      _usePost2$ = _usePost2[1],\n      createLoading = _usePost2$.loading,\n      createError = _usePost2$.error;\n\n  var handleAddTask = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(task) {\n      var updateTasks;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // update local\n              updateTasks = [task].concat(_toConsumableArray(tasks));\n              setTasks(updateTasks);\n              return _context.abrupt(\"return\", postData(task));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleAddTask(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (createError) {\n    alert(\"Create unsuccessful: \".concat(createError));\n  }\n\n  return __jsx(Container, {\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, __jsx(TaskInput, {\n    isLoading: createLoading,\n    onAdd: handleAddTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), loading && \"Loading data...\", error && error.message, __jsx(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, tasks.length <= 0 ? __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"Empty!!!\") : tasks.map(function (task) {\n    return __jsx(TaskListItem, {\n      key: task.id,\n      status: task.status,\n      taskId: task.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, task.title);\n  })));\n}\n\n_s(Home, \"TI+npqlCN1Y+gRc1Sr7G7+XsYec=\", false, function () {\n  return [useFetch, usePost];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["E:/study code/Study Code Project Youtube/Learn Code YouTube/test code javascript/JavaScript/Son Dang/blog-examples/when-to-use-useCallback/pages/index.tsx"],"names":["Container","List","ListItem","ADD_TODO","TODOS","TaskInput","TaskListItem","useEffect","useState","useFetch","usePost","Home","tasks","setTasks","fetchData","loading","error","then","data","postData","createLoading","createError","handleAddTask","task","updateTasks","alert","message","length","map","id","status","title"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,QAA1B,QAA0C,mBAA1C;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,mBAAhC;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,OAAT,QAAwB,uBAAxB;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAAA;;AAAA,kBACYH,QAAQ,CAAkB,EAAlB,CADpB;AAAA,MACPI,KADO;AAAA,MACAC,QADA;;AAAA,kBAE0BJ,QAAQ,CAACL,KAAD,CAFlC;AAAA;AAAA,MAEPU,SAFO;AAAA;AAAA,MAEMC,OAFN,eAEMA,OAFN;AAAA,MAEeC,KAFf,eAEeA,KAFf;;AAIdT,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,SAAS,GAAGG,IAAZ,CAAiB,UAACC,IAAD,EAAU;AACzBL,MAAAA,QAAQ,CAACK,IAAD,CAAR;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAJc,iBAUqDR,OAAO,CAACP,QAAD,CAV5D;AAAA;AAAA,MAUPgB,QAVO;AAAA;AAAA,MAUcC,aAVd,cAUKL,OAVL;AAAA,MAUoCM,WAVpC,cAU6BL,KAV7B;;AAYd,MAAMM,aAAa;AAAA,wEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACMC,cAAAA,WAFc,IAEkBD,IAFlB,4BAE2BX,KAF3B;AAGpBC,cAAAA,QAAQ,CAACW,WAAD,CAAR;AAHoB,+CAKbL,QAAQ,CAACI,IAAD,CALK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbD,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAQA,MAAID,WAAJ,EAAiB;AACfI,IAAAA,KAAK,gCAAyBJ,WAAzB,EAAL;AACD;;AAED,SACE,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAED,aAAtB;AAAqC,IAAA,KAAK,EAAEE,aAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGP,OAAO,IAAI,iBAHd,EAIGC,KAAK,IAAIA,KAAK,CAACU,OAJlB,EAKE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,KAAK,CAACe,MAAN,IAAgB,CAAhB,GACC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,GAGCf,KAAK,CAACgB,GAAN,CAAU,UAACL,IAAD,EAAyB;AACjC,WACE,MAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,IAAI,CAACM,EAAxB;AAA4B,MAAA,MAAM,EAAEN,IAAI,CAACO,MAAzC;AAAiD,MAAA,MAAM,EAAEP,IAAI,CAACM,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,IAAI,CAACQ,KADR,CADF;AAKD,GAND,CAJJ,CALF,CADF;AAqBD;;GA7CQpB,I;UAEiCF,Q,EAQ2BC,O;;;KAV5DC,I;AA+CT,eAAeA,IAAf","sourcesContent":["import { Container, List, ListItem } from \"@material-ui/core\";\nimport { ADD_TODO, TODOS } from \"queries/endpoints\";\nimport TaskInput from \"components/TaskInput\";\nimport TaskListItem from \"components/TaskListItem\";\nimport { useEffect, useState } from \"react\";\nimport { TaskPropsType } from \"types\";\nimport { useFetch } from \"queries/hooks/useFetch\";\nimport { usePost } from \"queries/hooks/usePost\";\n\nfunction Home() {\n  const [tasks, setTasks] = useState<TaskPropsType[]>([]);\n  const [fetchData, { loading, error }] = useFetch(TODOS);\n\n  useEffect(() => {\n    fetchData().then((data) => {\n      setTasks(data);\n    });\n  }, []);\n\n  const [postData, { loading: createLoading, error: createError }] = usePost(ADD_TODO);\n\n  const handleAddTask = async (task: TaskPropsType) => {\n    // update local\n    const updateTasks: TaskPropsType[] = [task, ...tasks];\n    setTasks(updateTasks);\n\n    return postData(task);\n  };\n\n  if (createError) {\n    alert(`Create unsuccessful: ${createError}`);\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <TaskInput isLoading={createLoading} onAdd={handleAddTask} />\n\n      {loading && \"Loading data...\"}\n      {error && error.message}\n      <List>\n        {tasks.length <= 0 ? (\n          <ListItem>Empty!!!</ListItem>\n        ) : (\n          tasks.map((task: TaskPropsType) => {\n            return (\n              <TaskListItem key={task.id} status={task.status} taskId={task.id}>\n                {task.title}\n              </TaskListItem>\n            );\n          })\n        )}\n      </List>\n    </Container>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}