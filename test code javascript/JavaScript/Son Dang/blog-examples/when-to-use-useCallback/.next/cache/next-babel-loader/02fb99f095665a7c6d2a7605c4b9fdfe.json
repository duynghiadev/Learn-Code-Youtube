{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\study code\\\\Study Code Project Youtube\\\\Learn Code YouTube\\\\test code javascript\\\\JavaScript\\\\Son Dang\\\\blog-examples\\\\when-to-use-useCallback\\\\components\\\\TaskListItem.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { ListItem, ListItemText, ListItemIcon, Icon } from \"@material-ui/core\";\nimport { STATUS_COLORS, STATUS_ICONS } from \"common/constants\";\nimport { usePost } from \"queries/hooks/usePost\";\nimport { UPDATE_TODO } from \"queries/endpoints\";\nimport { ActionGroup } from \"./ActionGroup\";\n\nfunction TaskListItem(_ref) {\n  _s();\n\n  var children = _ref.children,\n      status = _ref.status,\n      taskId = _ref.taskId;\n\n  var _useState = useState(status),\n      statusState = _useState[0],\n      setStatusState = _useState[1];\n\n  var _usePost = usePost(UPDATE_TODO),\n      _usePost2 = _slicedToArray(_usePost, 2),\n      postData = _usePost2[0],\n      _usePost2$ = _usePost2[1],\n      loading = _usePost2$.loading,\n      error = _usePost2$.error;\n\n  var handleUpdateTask = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(updateStatus) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setStatusState(updateStatus); // update to server\n\n              return _context.abrupt(\"return\", postData({\n                id: taskId,\n                status: updateStatus\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUpdateTask(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(Icon, {\n    style: {\n      color: STATUS_COLORS[statusState]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, STATUS_ICONS[statusState])), __jsx(ListItemText, {\n    style: {\n      color: STATUS_COLORS[statusState]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, children, error && error.message, loading && \"Updating...\"), __jsx(ActionGroup, {\n    statusState: statusState,\n    onUpdateTask: handleUpdateTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(TaskListItem, \"GQf5G7uJDghky8e1z/T9JWUOt1I=\", false, function () {\n  return [usePost];\n});\n\n_c = TaskListItem;\nexport default TaskListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskListItem\");","map":{"version":3,"sources":["E:/study code/Study Code Project Youtube/Learn Code YouTube/test code javascript/JavaScript/Son Dang/blog-examples/when-to-use-useCallback/components/TaskListItem.tsx"],"names":["useState","ListItem","ListItemText","ListItemIcon","Icon","STATUS_COLORS","STATUS_ICONS","usePost","UPDATE_TODO","ActionGroup","TaskListItem","children","status","taskId","statusState","setStatusState","postData","loading","error","handleUpdateTask","updateStatus","id","color","message"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,YAAjC,EAA+CC,IAA/C,QAA2D,mBAA3D;AACA,SAAqBC,aAArB,EAAoCC,YAApC,QAAwD,kBAAxD;AAEA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,SAASC,YAAT,OAAuE;AAAA;;AAAA,MAA/CC,QAA+C,QAA/CA,QAA+C;AAAA,MAArCC,MAAqC,QAArCA,MAAqC;AAAA,MAA7BC,MAA6B,QAA7BA,MAA6B;;AAAA,kBAC/Bb,QAAQ,CAAaY,MAAb,CADuB;AAAA,MAC9DE,WAD8D;AAAA,MACjDC,cADiD;;AAAA,iBAE9BR,OAAO,CAACC,WAAD,CAFuB;AAAA;AAAA,MAE9DQ,QAF8D;AAAA;AAAA,MAElDC,OAFkD,cAElDA,OAFkD;AAAA,MAEzCC,KAFyC,cAEzCA,KAFyC;;AAIrE,MAAMC,gBAAgB;AAAA,yEAAG,iBAAOC,YAAP;AAAA;AAAA;AAAA;AAAA;AACvBL,cAAAA,cAAc,CAACK,YAAD,CAAd,CADuB,CAEvB;;AAFuB,+CAGhBJ,QAAQ,CAAC;AACdK,gBAAAA,EAAE,EAAER,MADU;AAEdD,gBAAAA,MAAM,EAAEQ;AAFM,eAAD,CAHQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBD,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AASA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAEjB,aAAa,CAACS,WAAD;AAAtB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqDR,YAAY,CAACQ,WAAD,CAAjE,CADF,CADF,EAIE,MAAC,YAAD;AAAc,IAAA,KAAK,EAAE;AAAEQ,MAAAA,KAAK,EAAEjB,aAAa,CAACS,WAAD;AAAtB,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,EAEGO,KAAK,IAAIA,KAAK,CAACK,OAFlB,EAGGN,OAAO,IAAI,aAHd,CAJF,EASE,MAAC,WAAD;AAAa,IAAA,WAAW,EAAEH,WAA1B;AAAuC,IAAA,YAAY,EAAEK,gBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD;;GA1BQT,Y;UAEgCH,O;;;KAFhCG,Y;AA4BT,eAAeA,YAAf","sourcesContent":["import { useState } from \"react\";\nimport { ListItem, ListItemText, ListItemIcon, Icon } from \"@material-ui/core\";\nimport { StatusEnum, STATUS_COLORS, STATUS_ICONS } from \"common/constants\";\nimport { TaskListItemProps } from \"types\";\nimport { usePost } from \"queries/hooks/usePost\";\nimport { UPDATE_TODO } from \"queries/endpoints\";\nimport { ActionGroup } from \"./ActionGroup\";\n\nfunction TaskListItem({ children, status, taskId }: TaskListItemProps) {\n  const [statusState, setStatusState] = useState<StatusEnum>(status);\n  const [postData, { loading, error }] = usePost(UPDATE_TODO);\n\n  const handleUpdateTask = async (updateStatus: StatusEnum) => {\n    setStatusState(updateStatus);\n    // update to server\n    return postData({\n      id: taskId,\n      status: updateStatus,\n    });\n  };\n\n  return (\n    <ListItem>\n      <ListItemIcon>\n        <Icon style={{ color: STATUS_COLORS[statusState] }}>{STATUS_ICONS[statusState]}</Icon>\n      </ListItemIcon>\n      <ListItemText style={{ color: STATUS_COLORS[statusState] }}>\n        {children}\n        {error && error.message}\n        {loading && \"Updating...\"}\n      </ListItemText>\n      <ActionGroup statusState={statusState} onUpdateTask={handleUpdateTask} />\n    </ListItem>\n  );\n}\n\nexport default TaskListItem;\n"]},"metadata":{},"sourceType":"module"}