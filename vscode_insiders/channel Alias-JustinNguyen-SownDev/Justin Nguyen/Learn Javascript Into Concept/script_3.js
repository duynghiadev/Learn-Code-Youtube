/**
 * Qu·∫£n L√Ω B·ªô Nh·ªõ Garbage Collector Trong Javascript | Justin NguyenüöÄ
 */
/**
 * - Trong b√†i n√†y ch√∫ng ta s·∫Ω h·ªçc v·ªÅ: Memory Management in JS ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÄÔ∏è (N√™n search google)
 *  - Allocate the memory you need, use the allocated memory (read, write)
 *  - Garbage Collection: Release the allocated memory when it is not needed anymore
 *
 * - Common Problem: Circular ref and Mark & Sweep Algorithms
 * - Trong th·ª±c t·∫ø ng√†y nay th√¨ Mark & Sweep Algorithms ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r·∫£i v√† ph·ªï bi·∫øn h∆°n r·∫•t nhi·ªÅu
 */
let i = 10
let obj = {
  name: 'Justin'
}
let print = function () {
  const name = 'Duynghiadev'
  console.log('name:', name)
}
let arr = [1, 2, 3, 'Justin']
button.on('click', function () {})

// Garbage Collection
// Hi·ªÉu n√¥m na l√† kh√¥ng c√≤n tham chi·∫øu ƒë·∫øn object ƒë√≥ n·ªØa th√¨ s·∫Ω b·ªã x√≥a
let obj_1 = {
  name: 'Justin',
  age: 20
}
let newObj_1 = obj_1
obj_1 = 1
let prop = newObj_1.name
newObj_1 = 'Justin'
prop = null

// Circular ref
function a() {
  const a1 = function () {}
  const a2 = function () {}
  a1.a = a2
  a2.a = a1
}
a()

// Trong th·ª±c t·∫ø th√¨ ch√∫ng ta s·∫Ω th·∫•y nh·ªØng ƒëo·∫°n code nh∆∞ th·∫ø n√†y
let div
window.onload = function () {
  div = document.getElementById('myDivElement')
  div.circularReference = div
  div.lotsOfData = new Array(10000).join('*')
}
