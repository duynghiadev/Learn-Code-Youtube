import { createSlice, PayloadAction, createAction } from "@reduxjs/toolkit"
import { IUser } from "../../types/backend";

export interface UserState {
    isPending: boolean;
    isError: boolean;
    data: IUser[];
    errors: any;
}

const initialState: UserState = {
    isPending: false,
    isError: false,
    data: [],
    errors: [],
}

export const fetchUserPending = createAction("fetchUserPending");
export const fetchUserSuccess = createAction<IUser[]>("fetchUserSuccess");
export const fetchUserFailed = createAction("fetchUserFailed");

export const userSlice = createSlice({
    name: "user",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchUserPending, (state, action) => {
                state.isPending = true;
                state.isError = false;
            })
            .addCase(fetchUserSuccess, (state, action) => {
                state.isPending = false;
                state.isError = false;
                state.data = action.payload;
            })
            .addCase(fetchUserFailed, (state, action) => {
                state.isPending = false;
                state.data = [];
                state.isError = true;
            })

    },
})

export const { } = userSlice.actions



export default userSlice.reducer
